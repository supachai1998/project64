generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "createMany"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?   @db.VarChar(255)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  apporve       Boolean?  @default(false)
  delete        Boolean?  @default(false)
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ncds {
  id        Int         @id @default(autoincrement())
  name_th   String
  name_en   String
  imply     String?     @db.LongText
  video     String?
  cause     String?     @db.LongText
  reduce    String?     @db.LongText
  signs     String?     @db.LongText
  sugess    String?     @db.LongText
  ref       Ref[]
  views     Int?        @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  images    ImageNCDS[]
  foodncds  FoodNcds[]
}

model Ref {
  id      Int     @id @default(autoincrement())
  url     String
  Ncds    Ncds?   @relation(fields: [ncdsId], references: [id])
  ncdsId  Int?
  Food    Food?   @relation(fields: [foodId], references: [id])
  foodId  Int?
  Blogs   Blogs?  @relation(fields: [blogsId], references: [id])
  blogsId String?
}

model Food {
  id         Int         @id @default(autoincrement())
  foodTypeId Int
  FoodType   FoodType    @relation(fields: [foodTypeId], references: [id])
  name_th    String
  name_en    String
  proceduce  String      @db.LongText
  calories   Float
  detail     String      @db.LongText
  ref        Ref[]
  ingredient String      @db.LongText
  video      String?
  views      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  FoodNcds   FoodNcds[]
  image      ImageFood[]
}

model FoodType {
  id        Int      @id @default(autoincrement())
  name_th   String   @unique
  name_en   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Food      Food[]
}

model FoodNcds {
  id          Int        @id @default(autoincrement())
  detail      String     @db.LongText
  suggess     Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  image       ImageFood? @relation(fields: [imageFoodId], references: [id])
  Ncds        Ncds?      @relation(fields: [ncdsId], references: [id])
  ncdsId      Int?
  food        Food       @relation(fields: [foodId], references: [id])
  foodId      Int
  imageFoodId String?
}

model ImageNCDS {
  id     String @id @default(uuid())
  name   String @db.LongText
  Ncds   Ncds?  @relation(fields: [ncdsId], references: [id])
  ncdsId Int?
}

model ImageFood {
  id       String     @id @default(uuid())
  name     String     @db.LongText
  Food     Food?      @relation(fields: [foodId], references: [id])
  foodId   Int?
  FoodNcds FoodNcds[]
}

model ImageBlog {
  id      String  @id @default(uuid())
  name    String  @db.LongText
  Blogs   Blogs?  @relation(fields: [blogsId], references: [id])
  blogsId String?
}

model Blogs {
  id        String      @id @default(uuid())
  type      Type
  name      String
  imply     String      @db.LongText
  approve   Int?        @default(0)
  video     String?
  vote_1    Int?
  vote_2    Int?
  vote_3    Int?
  vote_4    Int?
  vote_5    Int?
  views     Int?
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  ref       Ref[]
  subBlog   subBlog[]
  image     ImageBlog[]
}

model subBlog {
  id      String  @id @default(uuid())
  name    String
  detail  String  @db.LongText
  image   String?
  Blogs   Blogs?  @relation(fields: [blogsId], references: [id])
  blogsId String?
}

enum Role {
  USER
  ADMIN
}

enum Type {
  NCDS
  FOOD
  ALL
}
