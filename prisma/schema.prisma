// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider              = "mysql"
  url                   = env("DATABASE_URL")
  referentialIntegrity  = "prisma"
  planetScaleMode       = true
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  apporve       Boolean?  @default(false)
  delete        Boolean?  @default(false)
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ncds {
  id        Int         @id @default(autoincrement())
  name_th   String
  name_en   String
  imply     String
  video     String
  mean      String
  cause     String
  reduce    String
  signs     String
  sugess    String
  views     Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  images    ImageNCDS[]
  foodncds  FoodNcds[]
}

model Food {
  id         Int         @id @default(autoincrement())
  name_th    String
  name_en    String
  proceduce  String      @db.Text
  calories   Float
  nutrition  String
  video      String?
  views      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  typeFoodId Int
  TypeFood   TypeFood    @relation(fields: [typeFoodId], references: [id])
  FoodNcds   FoodNcds[]
  image      ImageFood[]
}

model TypeFood {
  id        Int      @id @default(autoincrement())
  name_th   String
  name_en   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Food      Food[]
}

model FoodNcds {
  id        Int      @id @default(autoincrement())
  detail    String
  suggess   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Ncds   Ncds? @relation(fields: [ncdsId], references: [id])
  ncdsId Int?
  food   Food  @relation(fields: [foodId], references: [id])
  foodId Int
}

model ImageNCDS {
  id  String @id @default(uuid())
  url String

  Ncds   Ncds? @relation(fields: [ncdsId], references: [id])
  ncdsId Int?
}

model ImageFood {
  id  String @id @default(uuid())
  url String

  Food   Food? @relation(fields: [foodId], references: [id])
  foodId Int?
}

model ImageBlog {
  id  String @id @default(uuid())
  url String

  Blogs   Blogs?  @relation(fields: [blogsId], references: [id])
  blogsId String?
}

model Blogs {
  id        String   @id @default(uuid())
  type      Type
  name      String
  imply     String
  video     String?
  vote_1    Int?
  vote_2    Int?
  vote_3    Int?
  vote_4    Int?
  vote_5    Int?
  views     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image ImageBlog[]
}

model subBlog {
  id     String  @id @default(uuid())
  name   String
  detail String  @db.Text
  image  String?
}

enum Role {
  USER
  ADMIN
}

enum Type {
  NCDS
  FOOD
  ALL
}
